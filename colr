#!/usr/bin/env zsh

self=$0:t

# ------------------------------------------------------------- #
#                              help                             #
# ------------------------------------------------------------- #

[[ $1 = '-h' || $1 = --help ]] &&
{
echo
read -erd '' <<'EOF'
NAME

  colr - colorize text on stdin, or run a util and colorize its output


SYNOPSIS

  colr [util [util-opt]...] [[--colorDef|-_c] [RE grepOpt ansicolor]...]


DESCRIPTION

  If no `util` is provided, text on stdin is colorized.

  If no `--colorDef` argument + following formatting rules triples is provided, some default formatting rules are applied.


OPTIONS

  -_c, --colorDef


ENVIRONMENT

  COLR_COLLECT
    If non-null, then with the `util` form, stderr is immediately merged with its stdout, after which the merged output will undergo the colorization process. The colorized output is then written to colr-s stdout. This is intended to avoid stdout/stderr out-of-order problems.

  COLR_NAMEIFY
    If non-null, then all single-quoted substrings of the processed text additionally undergoes named directory substitution.


EXAMPLES

  Will use default formatting rules, will produce identical output:

    colr print -l message error warning

    print -l message error warning | colr

    { echo message
      echo error
      echo warning >&2
    } | colr

  Will colorize kernel version in blue and any HH:MM:SS times in green:

    colr uname -a --colorDef \
      'kernel version [\d\.]+'  -i  '38;5;117' \
      ' (\d\d|:)+ '             ''  '38;5;119'

  Will print "a dir: '~/subdir'":

    print "a dir: '$HOME/subdir'" \
    | COLR_NAMEIFY=1 colr

  Illustrating COLR_COLLECT:

    { COLR_COLLECT='' \
      colr zsh -c 'echo warning-text >&2' \

      COLR_COLLECT='1' \
      colr zsh -c 'echo warning-text >&2'

    } | sed -E 's/$/  **on stdout**/'

    # output ("warning" colored on both lines):
    #   warning-text
    #   warning-text  **on stdout**

EOF
echo
exit 0
}


# ------------------------------------------------------------- #
#                         implementation                        #
# ------------------------------------------------------------- #

# Using `grep` for colorization: a choice that is both odd and seemingly without benefits. But that's how I once started off this script, and until I get around to re-implementing the core in a sounder way, that's what we have. Personal legacy code.

setopt   local_options NO_unset pipefail NO_monitor NO_glob

# internal parameters:
DBG=0
DBG_BYPASS=0

__grep=( ggrep --color=always --line-buffered )

clrDefDefault=(
  ^error                      -i  '01;31'  # red
  ^warning                    -i  '01;33'  # yellow
  )

# parse arguments:
cmdArr=()
clrDef=()
while (( $#>0 )) && [[ ! $1 =~ '--colorDef|-_c' ]]; do cmdArr+=$1; shift; done
while (( $#>0 )) && [[   $1 =~ '--colorDef|-_c' ]]; do :         ; shift; done
while (( $#>0 ))                                  ; do clrDef+=$1; shift; done

# fix + check colors array:
(( $#clrDef == 0 )) && clrDef=("${(@)clrDefDefault}")
(( (${#clrDef} % 3) != 0 )) &&
  { >&2 echo "$self: colorDef: ${#clrDef} elements, expected multiple of 3"
    exit 1
  }

# main function:
colorize() {
  if (( $# >= 3 ))
  then
    local    pat="($1)|$"
    local -a opts=( ${(s[ ])2} )
    local    color=$3
    shift 3
    GREP_COLORS="ms=$color"           \
      $__grep "${opts[@]}" -P "$pat"  \
      | colorize "$@"  # <- recursion
  else
    cat -u
    (( $# > 0 )) && >&2 echo "$self: warning: unexpected colorDef element"
  fi
  # implementation notes:
  #   no tail call optimization in zsh; hence this function is not written to be able to make use of such
  #   consequentially, this implementation does not scale with large colorDef tables (but that's unlikely to be a problem)
  }

# substitute named dirs (opt-in):
nameify() {
  ! (( ${COLR_NAMEIFY-0} )) && { cat; return; }
  local -r tick=\'
  local line tokenized nameified joinified
  while IFS= read -rd $'\n' line
  do
    tokenized=( "${(@)${(@ps[$tick])line}}" )
    nameified=( "${(@D)tokenized}"      )
    joinified=${(pj[$tick])"${(@Q)nameified}"}
    print -r -- "$joinified"
  done
  if (( ${DBG_NAMEIFY-0} )) {
    echo && typeset -p1 tokenized nameified joinified \
            | sed 's/^/  /'
    }
  }

if (( DBG ))
then  typeset -p 1 cmdArr
      typeset -p 1 clrDef
fi
if (( DBG_BYPASS ))
then  "${(@)cmdArr}"
      exit 0
fi


# ------------------------------------------------------------- #
#                          main program                         #
# ------------------------------------------------------------- #

zmodload zsh/datetime
local rnd=$(( (epochtime[2]/1000) % 10000 ))

local P_stdout=/tmp/P_${rnd}_${self}_stdout
local P_stdERR=/tmp/P_${rnd}_${self}_stdERR
  # TODO: don't hard-code /tmp/; instead use mktemp etc.

[[ ${COLR_COLLECT-} ]] && __col() true  \
                       || __col() false

(( DBG )) && { __col && <<<collect_yes || <<<collect_NO }


{ rm -f  $P_stdout(Np) $P_stdERR(Np)

               mkfifo $P_stdout
  ! __col &&   mkfifo $P_stdERR

               < $P_stdout nameify  |  colorize "${clrDef[@]}"       &
  ! __col &&   < $P_stdERR nameify  |  colorize "${clrDef[@]}"  >&2  &

  ! __col &&   local cmdErrTo=$P_stdERR \
          ||   local cmdErrTo=$P_stdout

  eval "${(@q)cmdArr:-cat}" 1>$P_stdout 2>$cmdErrTo


} always {
  wait
  sleep 0.3
  () { setopt glob; rm -f $P_stdout(Np) $P_stdERR(Np)
     }

}

return


# ------------------------------------------------------------- #
#                             (misc)                            #
# ------------------------------------------------------------- #

__nameify_test() {

  str0="x ' \' \$ '\$' y";
  <<< "$str0"
  <<< "$str0" | nameify

  str1="x '/Users/carl' y";
  <<< "$str1"
  <<< "$str1" | nameify

  str2="x ' '/Users/carl' y '/Users/carl/has space/' z";
  <<< "$str2"
  <<< "$str2" | nameify

  echo
  arr_all=( "$str0" "$str1" "$str2" )
  str_all=${(F)arr_all}
  <<< "$str_all"; echo
  <<< "$str_all" | nameify
  }

unfunction __nameify_test